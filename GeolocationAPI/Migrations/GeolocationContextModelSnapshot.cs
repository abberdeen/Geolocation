// <auto-generated />
using System;
using System.Net;
using Geolocation.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Geolocation.API.Migrations
{
    [DbContext(typeof(GeolocationContext))]
    partial class GeolocationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Geolocation.Common.Block", b =>
                {
                    b.Property<ValueTuple<IPAddress, int>>("Network")
                        .HasColumnType("cidr");

                    b.Property<int?>("AccuracyRadius")
                        .HasColumnType("integer");

                    b.Property<int?>("GeonameId")
                        .HasColumnType("integer");

                    b.Property<int?>("IsAnonymousProxy")
                        .HasColumnType("integer");

                    b.Property<int?>("IsSatelliteProvider")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<int?>("RegisteredCountryGeonameId")
                        .HasColumnType("integer");

                    b.Property<string>("RepresentedCountryGeonameId")
                        .HasColumnType("text");

                    b.HasKey("Network");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Geolocation.Common.Location", b =>
                {
                    b.Property<int>("GeonameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<string>("ContinentCode")
                        .HasColumnType("text");

                    b.Property<string>("ContinentName")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<bool>("IsInEuropeanUnion")
                        .HasColumnType("boolean");

                    b.Property<string>("LocaleCode")
                        .HasColumnType("text");

                    b.Property<string>("MetroCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Subdivision1IsoCode")
                        .HasColumnType("text");

                    b.Property<string>("Subdivision2IsoCode")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("GeonameId");

                    b.ToTable("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
